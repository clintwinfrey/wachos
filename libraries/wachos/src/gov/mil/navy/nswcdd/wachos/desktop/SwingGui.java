/**
 * The WACHOS software library is developed by the U.S. Department of Defense
 * (DoD).  It is made available to the public under the terms of the Apache
 * License, Version 2.0.
 *
 * Copyright (c) 2025, Naval Surface Warfare Center, Dahlgren Division.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Legal Notice: This software is subject to U.S. government licensing and
 * export control regulations. Unauthorized use, duplication, or distribution is
 * prohibited. All rights to this software are held by the U.S. Department of
 * Defense or its contractors.
 *
 * Patent Notice: This software may be subject to one or more patent
 * applications. Users of the software should ensure they comply with any
 * licensing or usage terms associated with the patent(s). For more
 * information, please refer to the patent application (Navy Case 109347,
 * 18/125,944).
 *
 * @author Clinton Winfrey
 * @version 1.0
 * @since 2025
 */
package gov.mil.navy.nswcdd.wachos.desktop;

import gov.mil.navy.nswcdd.wachos.components.layout.Layout;
import gov.mil.navy.nswcdd.wachos.desktop.responder.ResourceResponder;
import gov.mil.navy.nswcdd.wachos.tools.WachosGui;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import javax.imageio.ImageIO;
import org.cef.CefApp;
import org.cef.browser.CefBrowser;

/**
 * SwingGui is a Java Swing JFrame that deploys a WachosGui
 */
public class SwingGui extends javax.swing.JFrame {

    /**
     * Creates a SwingGui
     *
     * @param wachosGui the WachosGui to deploy via Java Swing
     */
    @SuppressWarnings("ResultOfObjectAllocationIgnored")
    public static void create(WachosGui wachosGui) {
        java.awt.EventQueue.invokeLater(() -> new SwingGui(wachosGui));
    }

    /**
     * Creates new form SimpleGui
     *
     * @param wachosGui the WachosGui to deploy via Java Swing
     */
    @SuppressWarnings("UseSpecificCatch")
    private SwingGui(WachosGui wachosGui) {
        //set the mode
        DesktopBuilder.MODE = DesktopBuilder.Mode.DESKTOP;

        //set the look and feel for things like file selector
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
        }

        //set up the GUI
        initComponents();
        SwingGui.this.setExtendedState(MAXIMIZED_BOTH); //fullscreen it
        DesktopBuilder.JFRAME = SwingGui.this;

        //set up the server
        NanoServer server = new NanoServer();
        try {
            server.add(new ResourceResponder("resources", "META-INF/resources"));
            server.start();
        } catch (IOException e) {
        }

        //set up the CefBrowser so we can put the WachosGui in it
        CefBrowser browser = JcefSession.createBrowser(server, session -> {
            Layout webapp = wachosGui.create(session);
            DesktopBuilder.JFRAME.setTitle(session.title);

            try {
                if (new File("icon.png").exists()) {
                    DesktopBuilder.JFRAME.setIconImage(ImageIO.read(new File("icon.png")));
                } else {
                    DesktopBuilder.JFRAME.setIconImage(ImageIO.read(new URL("http://localhost:" + server.myPort + "/" + session.icon)));
                }
            } catch (Exception e) {
            }

            webapp.setWidth("100%");
            return webapp;
        });
        cefPanel.add(browser.getUIComponent(), java.awt.BorderLayout.CENTER);

        //when closing the application, dispose the CefApp instance
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            CefApp.getInstance().dispose();
        }));

        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cefPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cefPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cefPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1133, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cefPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel cefPanel;
    // End of variables declaration//GEN-END:variables
}
